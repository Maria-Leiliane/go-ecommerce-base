services:
  postgres:
    image: postgres:15-alpine
    container_name: crud-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin}
      POSTGRES_DB: ${DB_NAME:-products-db}
    ports:
      - "5433:5432"
    networks:
      - ecommerce-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-admin} -d ${DB_NAME:-products-db}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data

  api:
    build: .
    container_name: go-api
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-admin}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      DB_NAME: ${DB_NAME:-products-db}
    networks:
      - ecommerce-net
    restart: unless-stopped

  frontend:
    build:
      context: ./ecommerce-frontend
      dockerfile: Dockerfile
    container_name: react-app
    ports:
      - "3000:80"
    networks:
      - ecommerce-net
    depends_on:
      - api
    restart: unless-stopped

networks:
  ecommerce-net:
    driver: bridge

volumes:
  db-data: